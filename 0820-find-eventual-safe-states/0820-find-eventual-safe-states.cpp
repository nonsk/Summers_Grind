class Solution { public: bool dfs(int node, vector<int>& state, const vector<vector<int>>& graph) { if (state[node] > 0) return state[node] == 2; state[node] = 1; for (int next : graph[node]) { if (state[next] == 2) continue; if (state[next] == 1 || !dfs(next, state, graph)) return false; } state[node] = 2; return true; } vector<int> eventualSafeNodes(const vector<vector<int>>& graph) { int n = graph.size(); vector<int> state(n, 0); vector<int> result; result.reserve(n); for (int i = 0; i < n; ++i) { if (dfs(i, state, graph)) { result.push_back(i); } } return result; } };
